<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Accessory Matcher - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏≠‡πá‡∏Å‡πÄ‡∏ã‡∏™‡∏ã‡∏≠‡∏£‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #2c3e50, #4a69bd);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 40px;
            padding: 40px;
        }

        .input-section, .result-section {
            background: #f8f9fa;
            padding: 30px;
            border-radius: 15px;
        }

        .section-title {
            font-size: 1.5rem;
            color: #2c3e50;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .upload-area {
            border: 3px dashed #bdc3c7;
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }

        .upload-area:hover {
            border-color: #3498db;
            background: #ecf0f1;
        }

        .upload-area.dragover {
            border-color: #2ecc71;
            background: #d5f4e6;
        }

        .upload-icon {
            font-size: 3rem;
            color: #95a5a6;
            margin-bottom: 15px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #2c3e50;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 12px;
            border: 2px solid #ecf0f1;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #3498db;
        }

        .checkbox-group {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 10px;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            margin-top: 20px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(52, 152, 219, 0.3);
        }

        .btn:active {
            transform: translateY(0);
        }

        .results {
            display: none;
        }

        .accessory-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .accessory-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

        .accessory-card:hover {
            transform: translateY(-5px);
        }

        .accessory-type {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .accessory-suggestion {
            color: #7f8c8d;
            margin-bottom: 8px;
        }

        .match-reason {
            background: #e8f5e8;
            color: #27ae60;
            padding: 8px;
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .color-preview {
            display: inline-block;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            margin-right: 10px;
            border: 2px solid white;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .uploaded-image {
            max-width: 100%;
            border-radius: 12px;
            margin: 20px 0;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
                padding: 20px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .container {
                margin: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚ú® Accessory Matcher</h1>
            <p>‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏≠‡πá‡∏Å‡πÄ‡∏ã‡∏™‡∏ã‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ö‡∏ö AI</p>
        </div>

        <div class="main-content">
            <div class="input-section">
                <h2 class="section-title">üì∏ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>
                
                <div class="upload-area" id="uploadArea">
                    <div class="upload-icon">üì∑</div>
                    <p>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏ä‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</p>
                    <input type="file" id="imageInput" accept="image/*" style="display: none;">
                </div>

                <div id="uploadedImageContainer"></div>

                <div class="form-group">
                    <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤</label>
                    <select class="form-control" id="clothingType">
                        <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤</option>
                        <option value="‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡∏¥‡πâ‡∏ï">‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡∏¥‡πâ‡∏ï</option>
                        <option value="‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏¢‡∏∑‡∏î">‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏¢‡∏∑‡∏î</option>
                        <option value="‡∏™‡∏π‡∏ó">‡∏™‡∏π‡∏ó</option>
                        <option value="‡πÄ‡∏î‡∏£‡∏™">‡πÄ‡∏î‡∏£‡∏™</option>
                        <option value="‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡∏≤‡∏ß">‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡∏≤‡∏ß</option>
                        <option value="‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÇ‡∏õ‡πÇ‡∏•">‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÇ‡∏õ‡πÇ‡∏•</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å</label>
                    <input type="color" class="form-control" id="primaryColor" value="#000000">
                </div>

                <div class="form-group">
                    <label>‡∏™‡∏µ‡∏£‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
                    <input type="color" class="form-control" id="secondaryColor" value="#ffffff">
                </div>

                <div class="form-group">
                    <label>‡∏•‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß</label>
                    <select class="form-control" id="pattern">
                        <option value="‡πÄ‡∏£‡∏µ‡∏¢‡∏ö">‡πÄ‡∏£‡∏µ‡∏¢‡∏ö</option>
                        <option value="‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á">‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á</option>
                        <option value="‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î">‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î</option>
                        <option value="‡∏•‡∏≤‡∏¢‡∏ï‡∏≤‡∏£‡∏≤‡∏á">‡∏•‡∏≤‡∏¢‡∏ï‡∏≤‡∏£‡∏≤‡∏á</option>
                        <option value="‡∏•‡∏≤‡∏¢‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ">‡∏•‡∏≤‡∏¢‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ</option>
                        <option value="‡∏≠‡∏∑‡πà‡∏ô‡πÜ">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏™‡πà</label>
                    <select class="form-control" id="occasion">
                        <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏≠‡∏Å‡∏≤‡∏™</option>
                        <option value="‡∏ó‡∏≥‡∏á‡∏≤‡∏ô">‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</option>
                        <option value="‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß">‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß</option>
                        <option value="‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á">‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</option>
                        <option value="‡πÄ‡∏î‡∏ó">‡πÄ‡∏î‡∏ó</option>
                        <option value="‡πÉ‡∏™‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô">‡πÉ‡∏™‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô</option>
                        <option value="‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤">‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö</label>
                    <div class="checkbox-group">
                        <label class="checkbox-item">
                            <input type="checkbox" value="‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•"> ‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•
                        </label>
                        <label class="checkbox-item">
                            <input type="checkbox" value="‡∏ß‡∏¥‡∏ô‡πÄ‡∏ó‡∏à"> ‡∏ß‡∏¥‡∏ô‡πÄ‡∏ó‡∏à
                        </label>
                        <label class="checkbox-item">
                            <input type="checkbox" value="‡∏™‡∏ï‡∏£‡∏µ‡∏ó"> ‡∏™‡∏ï‡∏£‡∏µ‡∏ó
                        </label>
                        <label class="checkbox-item">
                            <input type="checkbox" value="‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤"> ‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤
                        </label>
                    </div>
                </div>

                <button class="btn" onclick="generateRecommendations()">
                    üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏≠‡πá‡∏Å‡πÄ‡∏ã‡∏™‡∏ã‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                </button>
            </div>

            <div class="result-section">
                <h2 class="section-title">üíé ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏≠‡πá‡∏Å‡πÄ‡∏ã‡∏™‡∏ã‡∏≠‡∏£‡∏µ‡πà</h2>
                
                <div class="results" id="results">
                    <div class="accessory-grid" id="accessoryGrid">
                        <!-- Results will be populated here -->
                    </div>
                </div>
                
                <div id="placeholder" style="text-align: center; color: #7f8c8d; padding: 40px;">
                    <div style="font-size: 3rem; margin-bottom: 15px;">üí´</div>
                    <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏≠‡πá‡∏Å‡πÄ‡∏ã‡∏™‡∏ã‡∏≠‡∏£‡∏µ‡πà</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Accessory database
        const accessoryDB = {
            '‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π': {
                '‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•': ['‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö', '‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π‡∏ó‡∏≠‡∏á‡∏Ç‡∏≤‡∏ß‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å', '‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π‡πÑ‡∏Ç‡πà‡∏°‡∏∏‡∏Å‡πÄ‡∏•‡πá‡∏Å'],
                '‡∏ß‡∏¥‡∏ô‡πÄ‡∏ó‡∏à': ['‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π‡∏ó‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤', '‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏¥‡∏Å', '‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π‡∏û‡∏•‡∏≠‡∏¢‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°'],
                '‡∏™‡∏ï‡∏£‡∏µ‡∏ó': ['‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π‡∏´‡πà‡∏ß‡∏á‡πÉ‡∏´‡∏ç‡πà', '‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π‡∏™‡∏µ‡∏™‡∏±‡∏ô‡∏™‡∏î', '‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π‡πÅ‡∏ö‡∏ö‡πÄ‡∏ó‡πà'],
                '‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤': ['‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π‡πÄ‡∏û‡∏ä‡∏£', '‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π‡∏ó‡∏≠‡∏á‡πÅ‡∏ó‡πâ', '‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π‡πÑ‡∏Ç‡πà‡∏°‡∏∏‡∏Å‡πÉ‡∏´‡∏ç‡πà']
            },
            '‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠': {
                '‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•': ['‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å', '‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠‡∏ó‡∏≠‡∏á‡∏Ç‡∏≤‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö', '‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠‡∏à‡∏µ‡πâ‡πÄ‡∏•‡πá‡∏Å'],
                '‡∏ß‡∏¥‡∏ô‡πÄ‡∏ó‡∏à': ['‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠‡∏ó‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠‡∏•‡∏≤‡∏¢‡πÑ‡∏ó‡∏¢', '‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠‡πÅ‡∏ö‡∏ö‡πÇ‡∏ö‡∏£‡∏≤‡∏ì'],
                '‡∏™‡∏ï‡∏£‡∏µ‡∏ó': ['‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠‡πÇ‡∏ã‡πà‡∏´‡∏ô‡∏≤', '‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠‡∏™‡∏µ‡∏™‡∏±‡∏ô‡∏™‡∏î', '‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠‡πÅ‡∏ö‡∏ö‡πÄ‡∏ó‡πà'],
                '‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤': ['‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠‡πÄ‡∏û‡∏ä‡∏£', '‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠‡∏ó‡∏≠‡∏á‡πÅ‡∏ó‡πâ', '‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠‡πÑ‡∏Ç‡πà‡∏°‡∏∏‡∏Å']
            },
            '‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤': {
                '‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•': ['‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏ß ‡∏™‡∏≤‡∏¢‡∏´‡∏ô‡∏±‡∏á', '‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö', '‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏™‡∏µ‡∏î‡∏≥-‡∏Ç‡∏≤‡∏ß'],
                '‡∏ß‡∏¥‡∏ô‡πÄ‡∏ó‡∏à': ['‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏ó‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤', '‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÇ‡∏ö‡∏£‡∏≤‡∏ì', '‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏¢‡πâ‡∏≠‡∏ô‡∏¢‡∏∏‡∏Ñ'],
                '‡∏™‡∏ï‡∏£‡∏µ‡∏ó': ['‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏Å‡∏µ‡∏¨‡∏≤', '‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏î‡∏¥‡∏à‡∏¥‡∏ï‡∏≠‡∏•', '‡∏ô‡∏≤‡∏¨‡∏¥‡∏Ñ‡∏≤‡∏™‡∏µ‡∏™‡∏±‡∏ô‡∏™‡∏î'],
                '‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤': ['‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏ó‡∏≠‡∏á‡πÅ‡∏ó‡πâ', '‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÄ‡∏û‡∏ä‡∏£', '‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡πÄ‡∏ô‡∏°']
            },
            '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤': {
                '‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•': ['‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏™‡∏µ‡∏î‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö', '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•', '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏™‡∏µ‡πÄ‡∏ó‡∏≤'],
                '‡∏ß‡∏¥‡∏ô‡πÄ‡∏ó‡∏à': ['‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏Å‡πà‡∏≤', '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÇ‡∏ö‡∏£‡∏≤‡∏ì', '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏•‡∏≤‡∏¢‡πÑ‡∏ó‡∏¢'],
                '‡∏™‡∏ï‡∏£‡∏µ‡∏ó': ['‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏õ‡πâ', '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏™‡∏µ‡∏™‡∏±‡∏ô‡∏™‡∏î', '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏ó‡πà'],
                '‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤': ['‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡πÄ‡∏ô‡∏°', '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏´‡∏ô‡∏±‡∏á‡πÅ‡∏ó‡πâ', '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏ä‡∏£']
            },
            '‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤': {
                '‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•': ['‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤‡πÄ‡∏ü‡∏£‡∏°‡πÇ‡∏•‡∏´‡∏∞‡πÄ‡∏•‡πá‡∏Å', '‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤‡πÑ‡∏£‡πâ‡πÄ‡∏ü‡∏£‡∏°', '‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤‡∏™‡∏µ‡∏î‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö'],
                '‡∏ß‡∏¥‡∏ô‡πÄ‡∏ó‡∏à': ['‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏≠‡∏á', '‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤‡πÇ‡∏ö‡∏£‡∏≤‡∏ì', '‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤‡πÅ‡∏ö‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏¢‡∏∏‡∏Ñ'],
                '‡∏™‡∏ï‡∏£‡∏µ‡∏ó': ['‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤‡∏™‡∏µ‡∏™‡∏±‡∏ô‡∏™‡∏î', '‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏ó‡πà', '‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤‡πÉ‡∏´‡∏ç‡πà'],
                '‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤': ['‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡πÄ‡∏ô‡∏°', '‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏≠‡∏á‡πÅ‡∏ó‡πâ', '‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏ä‡∏£']
            }
        };

        // Color matching rules
        const colorRules = {
            complementary: (color) => {
                // Simple complementary color calculation
                const rgb = hexToRgb(color);
                return rgbToHex(255 - rgb.r, 255 - rgb.g, 255 - rgb.b);
            },
            neutral: ['#000000', '#FFFFFF', '#808080', '#C0C0C0', '#8B4513'],
            metallic: ['#FFD700', '#C0C0C0', '#CD7F32', '#E5E4E2']
        };

        function hexToRgb(hex) {
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }

        function rgbToHex(r, g, b) {
            return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
        }

        // File upload handling
        const uploadArea = document.getElementById('uploadArea');
        const imageInput = document.getElementById('imageInput');
        const uploadedImageContainer = document.getElementById('uploadedImageContainer');

        uploadArea.addEventListener('click', () => imageInput.click());
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });
        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });
        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                handleImageUpload(files[0]);
            }
        });

        imageInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                handleImageUpload(e.target.files[0]);
            }
        });

        function handleImageUpload(file) {
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    uploadedImageContainer.innerHTML = `
                        <img src="${e.target.result}" alt="Uploaded clothing" class="uploaded-image">
                        <p style="text-align: center; color: #27ae60; margin-top: 10px;">‚úÖ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß</p>
                    `;
                };
                reader.readAsDataURL(file);
            }
        }

        function generateRecommendations() {
            const clothingType = document.getElementById('clothingType').value;
            const primaryColor = document.getElementById('primaryColor').value;
            const secondaryColor = document.getElementById('secondaryColor').value;
            const pattern = document.getElementById('pattern').value;
            const occasion = document.getElementById('occasion').value;
            const styles = Array.from(document.querySelectorAll('input[type="checkbox"]:checked')).map(cb => cb.value);

            if (!clothingType || !occasion) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏™‡πà');
                return;
            }

            const recommendations = generateAccessoryRecommendations({
                clothingType,
                primaryColor,
                secondaryColor,
                pattern,
                occasion,
                styles
            });

            displayRecommendations(recommendations);
        }

        function generateAccessoryRecommendations(userInput) {
            const recommendations = [];
            const selectedStyles = userInput.styles.length > 0 ? userInput.styles : ['‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•'];

            // Generate recommendations for each accessory type
            Object.keys(accessoryDB).forEach(accessoryType => {
                selectedStyles.forEach(style => {
                    const items = accessoryDB[accessoryType][style] || [];
                    if (items.length > 0) {
                        const suggestion = items[Math.floor(Math.random() * items.length)];
                        const matchReason = generateMatchReason(userInput, accessoryType, style);
                        const recommendedColor = getRecommendedColor(userInput.primaryColor, userInput.pattern);
                        
                        recommendations.push({
                            type: accessoryType,
                            suggestion: suggestion,
                            style: style,
                            reason: matchReason,
                            color: recommendedColor,
                            occasion: userInput.occasion
                        });
                    }
                });
            });

            return recommendations.slice(0, 6); // Limit to 6 recommendations
        }

        function generateMatchReason(userInput, accessoryType, style) {
            const reasons = [];
            
            if (userInput.pattern === '‡πÄ‡∏£‡∏µ‡∏¢‡∏ö') {
                reasons.push('‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏à‡∏∂‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡πá‡∏Å‡πÄ‡∏ã‡∏™‡∏ã‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô');
            } else {
                reasons.push('‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡∏à‡∏∂‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡πá‡∏Å‡πÄ‡∏ã‡∏™‡∏ã‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÜ');
            }
            
            reasons.push(`‡∏™‡πÑ‡∏ï‡∏•‡πå${style}‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™${userInput.occasion}`);
            
            if (accessoryType === '‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤' && userInput.occasion === '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô') {
                reasons.push('‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
            }
            
            return reasons[Math.floor(Math.random() * reasons.length)];
        }

        function getRecommendedColor(primaryColor, pattern) {
            if (pattern !== '‡πÄ‡∏£‡∏µ‡∏¢‡∏ö') {
                return colorRules.neutral[Math.floor(Math.random() * colorRules.neutral.length)];
            } else {
                return colorRules.metallic[Math.floor(Math.random() * colorRules.metallic.length)];
            }
        }

        function displayRecommendations(recommendations) {
            const resultsDiv = document.getElementById('results');
            const placeholderDiv = document.getElementById('placeholder');
            const gridDiv = document.getElementById('accessoryGrid');
            
            gridDiv.innerHTML = '';
            
            recommendations.forEach(rec => {
                const card = document.createElement('div');
                card.className = 'accessory-card';
                card.innerHTML = `
                    <div class="accessory-type">${rec.type}</div>
                    <div class="accessory-suggestion">${rec.suggestion}</div>
                    <div style="margin: 10px 0;">
                        <span class="color-preview" style="background-color: ${rec.color}"></span>
                        <span>‡∏™‡∏µ: ${getColorName(rec.color)}</span>
                    </div>
                    <div class="match-reason">${rec.reason}</div>
                `;
                gridDiv.appendChild(card);
            });
            
            placeholderDiv.style.display = 'none';
            resultsDiv.style.display = 'block';
        }

        function getColorName(hex) {
            const colorNames = {
                '#000000': '‡∏î‡∏≥',
                '#FFFFFF': '‡∏Ç‡∏≤‡∏ß',
                '#808080': '‡πÄ‡∏ó‡∏≤',
                '#C0C0C0': '‡πÄ‡∏á‡∏¥‡∏ô',
                '#FFD700': '‡∏ó‡∏≠‡∏á',
                '#CD7F32': '‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á',
                '#8B4513': '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•'
            };
            return colorNames[hex] || '‡∏™‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©';
        }
    </script>
</body>
</html>
